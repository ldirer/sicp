(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
      (begin (set! balance (- balance amount))
             balance)
      "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
      ((eq? m 'deposit) deposit)
      (else (error "Unknown request -- MAKE-ACCOUNT" m))))
  dispatch)


(define acc (make-account 50))
((acc 'deposit) 40)
((acc 'withdraw) 60)


; environment structure generated by the sequence above:
; global env bindings: make-account (procedure env is global), acc (procedure env is E1)
; E1: balance: 50, withdraw, deposit, dispatch, points to global env.
; E2: m='deposit, points to E1.
; E3: amount=40, points to E1.
; After deposit, E1 changed to balance: 90
; E4: m='withdraw, points to E1.
; E5: amount=60, points to E1.
; After withdaw, E1 changed to balance: 30

; the local state for acc is stored in E1.

; suppose we define another account:
(define acc2 (make-account 100))
; Q: How are the local states for the two accounts kept distinct?
; Q: Which parts of the environment structure are shared between acc and acc2?
; A new environment E6 (similar to E1) is created. Stores local state for acc2.
; The global env is shared. Possibly the 'code' part of procedures, but that is an implementation detail.


